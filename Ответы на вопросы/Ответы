1) Объектно-ориентированное программирование (ООП)

Полное определение:
ООП - это методология программирования, основанная на представлении программы как совокупности взаимодействующих объектов, каждый из которых является экземпляром определенного класса. Классы образуют иерархии наследования.

Основные концепции:

1. Инкапсуляция
   - Принцип сокрытия внутренней реализации
   - Пример: класс BankAccount с private полем _balance и публичными методами deposit()/withdraw()
   - Преимущества: защита данных, упрощение модификации кода

2. Наследование
   - Механизм создания новых классов на основе существующих
   - Пример: класс Transport → подклассы Car, Airplane, Ship
   - Виды: одиночное, множественное, интерфейсное

3. Полиморфизм
   - Возможность объектов с одинаковым интерфейсом иметь разную реализацию
   - Пример: метод draw() для классов Circle, Square и Triangle
   - Типы: параметрический (generics), ad-hoc (перегрузка), подтипов

4. Абстракция
   - Выделение существенных характеристик объекта
   - Пример: интерфейс Database с методами connect(), query()
   - Уровни: от абстрактных классов до конкретных реализаций

Дополнительные принципы:
- Композиция (предпочтительнее наследования)
- Принцип единственной ответственности
- Принцип открытости/закрытости

 2) Магическое число 7 ± 2 (Закон Миллера)

Суть закона:
Когнитивный предел человека - одновременное удержание в рабочей памяти 7±2 информационных единиц.

Примеры в IT:

1. Архитектура ПО
   - Количество модулей в системе (оптимально 5-9)
   - Число слоев в многоуровневой архитектуре

2. Пользовательские интерфейсы
   - Количество пунктов главного меню (7±2)
   - Число иконок в панели инструментов

3. Программирование
   - Аргументы функций (рекомендуется ≤7)
   - Вложенность условий/циклов (макс. 3-4 уровня)

4. Базы данных
   - Количество таблиц в одной предметной области
   - Число колонок в таблице для комфортного восприятия

5. Сетевые протоколы
   - Количество уровней в модели OSI (7 уровней)
   - Число основных HTTP-методов (GET, POST и т.д.)

6. DevOps
   - Количество сервисов в микросервисной архитектуре
   - Число этапов в CI/CD пайплайне

7. **Алгоритмы**
   - Количество шагов в запоминающихся алгоритмах
   - Число переменных, требующих одновременного отслеживания

 3) Энтропия программного обеспечения

Определение:
Мера неупорядоченности системы, проявляющаяся в росте сложности поддержки и развития ПО со временем.

Антиэнтропийные меры:

1. Рефакторинг
   - Регулярное улучшение структуры кода
   - Пример: замена "магических чисел" именованными константами

2. Автоматизированное тестирование
   - Unit-тесты, интеграционные тесты
   - Пример: покрытие критического функционала тестами

3. Принципы SOLID
   - Single responsibility
   - Open-closed principle
   - Liskov substitution
   - Interface segregation
   - Dependency inversion

4. Шаблоны проектирования
   - Использование проверенных архитектурных решений
   - Пример: Factory, Observer, Strategy

5. Документирование
   - API-документация (Swagger)
   - Комментарии в коде (docstrings)
   - Архитектурные решения (ADRs)

6. CI/CD практики
   - Автоматизированные сборки
   - Статический анализ кода
   - Политики code review

 4) Признаки сложных систем по Гради Бучу

1. Иерархичность
   - Пример 1: Веб-приложение:
     * Уровень представления (UI)
     * Бизнес-логика
     * Уровень данных
   - Пример 2: Компилятор:
     * Лексический анализ
     * Синтаксический анализ
     * Генерация кода

2. Наличие обратных связей
   - Пример 1: Автоподстройка параметров БД
   - Пример 2: Алгоритмы балансировки нагрузки

3. Эмерджентность
   - Пример 1: Распределенные транзакции
   - Пример 2: Поведение нейросетей

4. Динамическая устойчивость
   - Пример 1: Автовосстановление сервисов
   - Пример 2: Circuit breaker-паттерн

5. Историческая зависимость
   - Пример 1: Поддержка устаревших API
   - Пример 2: Миграция данных между версиями

 5) Закон иерархических компенсаций Седова

Формулировка:
"Рост разнообразия на верхнем уровне системы обеспечивается ограничением разнообразия на нижних уровнях."

Примеры из IT-эволюции:н

1. Языки программирования
   - Низкий уровень: стандартизация байт-кода JVM
   - Высокий уровень: множество JVM-языков (Kotlin, Scala)

2. Веб-технологии
   - Низкий уровень: протокол HTTP
   - Высокий уровень: разнообразие веб-фреймворков

3. Облачные вычисления
   - Низкий уровень: стандартизация виртуализации
   - Высокий уровень: многообразие облачных сервисов

4. Мобильная разработка
   - Низкий уровень: ядро Android/iOS
   - Высокий уровень: фреймворки (Flutter, React Native)

5. Базы данных
   - Низкий уровень: стандарты SQL
   - Высокий уровень: разнообразие СУБД

6. Микропроцессоры
   - Низкий уровень: архитектура x86/ARM
   - Высокий уровень: многообразие вычислительных устройств

Вывод:
Каждый технологический скачок в IT сопровождался стандартизацией нижних уровней, что позволяло развивать разнообразие на верхних уровнях системы.
